{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionStart()); //turn false to true and start fetching\n    // method 1: firebase only\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{ \n    //   const collectionsMap = co nvertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading:false});\n    // });\n    //method 2 for non firebase API\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionFailure(error.message))); //method 3: fetching\n    // fetch('https://firestore.googleapis.com/v1/projects/kinngstore-7c58c/databases/(default)/documents/collections')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections));\n    //very nesty to get the item value and id...\n  };\n};","map":{"version":3,"sources":["C:/Users/fengy/Desktop/coding/React_JS/kinngshop/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionStart","type","FETCH_COLLECTIONS_START","fetchCollectionSuccess","collectionsMap","FETCH_COLLECTION_SUCCESS","payload","fetchCollectionFailure","errorMessage","FETCH_COLLECTION_FAILURE","fetchCollectionStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAmBC,+BAAnB,QAA0D,+BAA1D;AAEA,OAAO,MAAMC,oBAAoB,GAAG,OAAO;AACzCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADmB,CAAP,CAA7B;AAIP,OAAO,MAAMC,sBAAsB,GAAGC,cAAc,KAAI;AACtDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,wBADgC;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAJ,CAA7C;AAKP,OAAO,MAAMG,sBAAsB,GAAGC,YAAY,KAAK;AACrDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,wBAD+B;AAErDH,EAAAA,OAAO,EAAEE;AAF4C,CAAL,CAA3C;AAKP,OAAO,MAAME,yBAAyB,GAAG,MAAM;AAC7C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,oBAAoB,EAArB,CAAR,CAFiB,CAEiB;AAElC;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAY,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAG;AAClC,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,sBAAsB,CAACC,cAAD,CAAvB,CAAR;AACD,KAHD,EAGGa,KAHH,CAGSC,KAAK,IAAIP,QAAQ,CAACJ,sBAAsB,CAACW,KAAK,CAACC,OAAP,CAAvB,CAH1B,EAZiB,CAiBjB;AACA;AACA;AACA;AACA;AACD,GAtBD;AAuBD,CAxBM","sourcesContent":["import ShopActionTypes from './shop.types'\r\n\r\nimport { firestore,convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'\r\n\r\nexport const fetchCollectionStart = () => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\nexport const fetchCollectionSuccess = collectionsMap =>({\r\n  type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\r\n  payload: collectionsMap\r\n});\r\n\r\nexport const fetchCollectionFailure = errorMessage => ({\r\n  type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\r\n  payload: errorMessage\r\n})\r\n\r\nexport const fetchCollectionStartAsync = () => {\r\n  return dispatch => {\r\n    const collectionRef = firestore.collection('collections');\r\n    dispatch(fetchCollectionStart()); //turn false to true and start fetching\r\n\r\n    // method 1: firebase only\r\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{ \r\n    //   const collectionsMap = co nvertCollectionsSnapshotToMap(snapshot);\r\n    //   updateCollections(collectionsMap);\r\n    //   this.setState({loading:false});\r\n    // });\r\n\r\n    //method 2 for non firebase API\r\n    collectionRef.get().then(snapshot =>{ \r\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n      dispatch(fetchCollectionSuccess(collectionsMap));\r\n    }).catch(error => dispatch(fetchCollectionFailure(error.message)));\r\n\r\n    //method 3: fetching\r\n    // fetch('https://firestore.googleapis.com/v1/projects/kinngstore-7c58c/databases/(default)/documents/collections')\r\n    // .then(response => response.json())\r\n    // .then(collections => console.log(collections));\r\n    //very nesty to get the item value and id...\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}