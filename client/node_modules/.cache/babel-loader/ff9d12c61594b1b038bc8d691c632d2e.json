{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects'; //call: invokes methods, when a took too long then b\n//put: creating action\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  } // method 1: firebase only\n  // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{ \n  //   const collectionsMap = co nvertCollectionsSnapshotToMap(snapshot);\n  //   updateCollections(collectionsMap);\n  //   this.setState({loading:false});\n  // });\n  //method 2 for non firebase API\n  // collectionRef.get().then(snapshot =>{ \n  //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //   dispatch(fetchCollectionSuccess(collectionsMap));\n  // }).catch(error => dispatch(fetchCollectionFailure(error.message)));\n  //method 3: fetching\n  // fetch('https://firestore.googleapis.com/v1/projects/kinngstore-7c58c/databases/(default)/documents/collections')\n  // .then(response => response.json())\n  // .then(collections => console.log(collections));\n  //very nesty to get the item value and id...\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/fengy/Desktop/coding/React_JS/kinngshop/src/redux/shop/shop.saga.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionSuccess","fetchCollectionFailure","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAAyBC,GAAzB,QAAoC,oBAApC,C,CACA;AACA;;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SACEC,sBADF,EAEEC,sBAFF,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAG;AACD,UAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACG,+BAAD,EAAiCS,QAAjC,CAAjC;AACA,UAAMX,GAAG,CAACG,sBAAsB,CAACU,cAAD,CAAvB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMd,GAAG,CAACI,sBAAsB,CAACU,KAAK,CAACC,OAAP,CAAvB,CAAT;AACD,GAVsC,CAYrC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACH;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACtC,QAAMlB,SAAS,CAACO,eAAe,CAACY,uBAAjB,EAA0CX,qBAA1C,CAAf;AACD","sourcesContent":["import { takeEvery, call,put } from 'redux-saga/effects';\r\n//call: invokes methods, when a took too long then b\r\n//put: creating action\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'\r\n\r\nimport {\r\n  fetchCollectionSuccess,\r\n  fetchCollectionFailure\r\n} from './shop.actions'\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n  yield console.log('I am fired');\r\n\r\n  try{\r\n    const collectionRef = firestore.collection('collections');\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap,snapshot);\r\n    yield put(fetchCollectionSuccess(collectionsMap))\r\n  } catch (error) {\r\n    yield put(fetchCollectionFailure(error.message))\r\n  }\r\n  \r\n    // method 1: firebase only\r\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{ \r\n    //   const collectionsMap = co nvertCollectionsSnapshotToMap(snapshot);\r\n    //   updateCollections(collectionsMap);\r\n    //   this.setState({loading:false});\r\n    // });\r\n\r\n    //method 2 for non firebase API\r\n    // collectionRef.get().then(snapshot =>{ \r\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n    //   dispatch(fetchCollectionSuccess(collectionsMap));\r\n    // }).catch(error => dispatch(fetchCollectionFailure(error.message)));\r\n\r\n    //method 3: fetching\r\n    // fetch('https://firestore.googleapis.com/v1/projects/kinngstore-7c58c/databases/(default)/documents/collections')\r\n    // .then(response => response.json())\r\n    // .then(collections => console.log(collections));\r\n    //very nesty to get the item value and id...\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\r\n}"]},"metadata":{},"sourceType":"module"}